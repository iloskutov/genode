
if { [have_spec linux] || [have_spec muen] } {
	puts "Run script does not support Linux and Muen."
	exit 0
}

if { [get_cmd_switch --autopilot] && [have_include "power_on/qemu"] } {
	puts "Run script does not support autopilot mode on Qemu"
	exit 0
}

if { [get_cmd_switch --autopilot] &&
    ![have_spec arndale] &&
    ![have_spec panda] &&
    ![have_spec rpi] &&
    ![have_spec x86] &&
    ![have_spec imx6q_sabrelite] &&
    ![have_spec imx8q_evk]} {
	puts "Run script does not support autopilot mode on this platform"
	exit 0
}

#
# Build
#

set build_components {
	core init timer
	drivers/usb_host
	drivers/usb_serial
	test/uart
	server/dynamic_rom
	server/report_rom
}

lappend_if [have_spec gpio] build_components drivers/gpio

source ${genode_dir}/repos/base/run/platform_drv.inc
append_platform_drv_build_components

build $build_components

create_boot_directory

#
# Generate config
#

append config {
<config>
	<parent-provides>
		<service name="ROM"/>
		<service name="IRQ"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="PD"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="LOG"/>
	</parent-provides>
	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>
	<default caps="100"/>}

append_if [have_spec gpio] config "
	<start name=\"[gpio_drv]\" caps=\"150\">
		<resource name=\"RAM\" quantum=\"4M\"/>
		<provides><service name=\"Gpio\"/></provides>
		<config/>
	</start>"

append_platform_drv_config

append config {
	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Timer"/></provides>
	</start>

	<start name="report_rom">
		<resource name="RAM" quantum="1M"/>
		<provides> <service name="Report"/> <service name="ROM"/> </provides>
		<config verbose="no">
			<default-policy report="usb_drv -> devices"/>
		</config>
	</start>

	<start name="usb_drv" caps="150"> }
append config "<binary name=\"[usb_host_drv_binary]\"/>"
append config {
		<resource name="RAM" quantum="12M"/>
		<provides> <service name="Usb"/> </provides>
		<config bios_handoff="yes">
			<report devices="yes"/>
			<!-- ftdi in qemu -->
			<policy label_prefix="usb_serial_drv"  class="0xff"/>
		</config>
		<route>
			<service name="Report"> <child name="report_rom"/> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>

	<start name="usb_serial_drv" caps="200">
		<resource name="RAM" quantum="100M"/>
		<provides>
			<service name="Terminal"/>
			<service name="Uart"/>
		</provides>
		<route>
			<service name="ROM" label="report"> <child name="report_rom"/> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
		<config>
			<policy label_prefix="test-uart" uart="0" detect_size="no"/>
		</config>
	</start>

	<start name="dynamic_rom">
		<resource name="RAM" quantum="4M"/>
		<provides> <service name="ROM"/> </provides>
		<config verbose="no">
		</config>
		<route>
			<service name="ROM">   <parent/>             </service>
			<service name="CPU">   <parent/>             </service>
			<service name="PD">    <parent/>             </service>
			<service name="LOG">   <parent/>             </service>
			<service name="Timer"> <child name="timer"/> </service>
		</route>
	</start>

	<start name="test-uart">
		<resource name="RAM" quantum="1M"/>
	</start>
</config>}

install_config $config

#
# Boot modules
#

# generic modules
set boot_modules {
	core ld.lib.so init timer usb_serial_drv test-uart dynamic_rom report_rom
}

append boot_modules [usb_host_drv_binary]
lappend_if [have_spec gpio] boot_modules [gpio_drv]

append_platform_drv_boot_modules

build_boot_image $boot_modules

append qemu_args "-serial mon:stdio -device pci-ohci -chardev socket,host=localhost,port=3456,server,id=ch0, -device usb-serial,chardev=ch0"

if { [have_include "power_on/qemu"] || ![get_cmd_switch --autopilot] } { run_genode_until forever }

# autopilot test

run_genode_until forever

